name: Build and Tests

on:  
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    
env:
  Platform: x64
  Wap_Project_Directory: Jellyfin.UWP
  
permissions:
  contents: write

jobs:  
  build:    
    runs-on: windows-2022
    
    steps:      
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.
      
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.3.1

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.2.0
        
      - name: Setup VSTest
        uses: darenm/Setup-VSTest@v1.2

      - name: Navigate to Workspace
        run: cd $GITHUB_WORKSPACE

      - name: Restore Packages
        run: nuget restore Jellyfin.UWP.sln -Verbosity quiet

      - name: Build Solution
        run: |
          msbuild.exe Jellyfin.UWP.sln /p:configuration=$env:Configuration /p:Platform=x64 /p:AppxBundle=$env:AppxBundle /p:AppxBundlePlatforms="x64" -v:m
        env:
          AppxBundle: Always
          BuildMode: CI
          Configuration: Release
        
      - name: Run Tests
        run: vstest.console.exe /Platform:x64 .\tests\Jellyfin.UWP.Tests\bin\x64\Release\Jellyfin.UWP.Tests.build.appxrecipe

      # These aren't working in 
      # - name: Run UI Tests
        # run: dotnet test .\tests\Jellyfin.UWP.UI.Tests\ -c Release

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool install dotnet-sonarscanner --tool-path .\.sonar\scanner --version 6.0.0
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"senbeiwabaka_Jellyfin.UWP_AYuW2VkcOTfeuyv7RdaP" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          msbuild.exe Jellyfin.UWP.sln /p:configuration="Release" /p:Platform=x64 /p:AppxBundle=$env:AppxBundle /p:AppxBundlePlatforms="x64"  -v:q
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  deploy:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: build
    runs-on: windows-2022
    
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.
      
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.3.1

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.2.0
        
      - name: Setup VSTest
        uses: darenm/Setup-VSTest@v1.2

      - name: Navigate to Workspace
        run: cd $GITHUB_WORKSPACE
        
      - name: Setup NBGV
        uses: dotnet/nbgv@master
        with:
          setAllVars: true
    
      - name: Update manifest version
        shell: powershell
        run: |
          [xml]$manifest = get-content ".\$env:Wap_Project_Directory\Package.appxmanifest"
          $manifest.Package.Identity.Version = "${{ env.NBGV_SimpleVersion }}.0"
          $manifest.save(".\$env:Wap_Project_Directory\Package.appxmanifest")

      - name: Restore Packages
        run: nuget restore Jellyfin.UWP.sln -Verbosity quiet

      - name: Build Solution
        run: |
          msbuild.exe Jellyfin.UWP\Jellyfin.UWP.csproj /p:configuration=Release /p:Platform=x64 /p:AppxBundle=Always /p:AppxBundlePlatforms="x64" /p:UseDotNetNativeToolchain=true /p:UapAppxPackageBuildMode=SideloadOnly -v:m
        env:
          AppxBundle: Always
          BuildMode: CI
          Configuration: Release
          
      - name: Zip Package
        uses: vimtor/action-zip@v1.1
        with:
          files: .\Jellyfin.UWP\AppPackages\Jellyfin.UWP_${{ env.NBGV_SimpleVersion }}.0_Test
          dest: Jellyfin.UWP.zip
          
      - name: Creates a release in GitHub and uploads attachments
        run: |
          gh release create "v${{ env.NBGV_SimpleVersion }}.0" Jellyfin.UWP.zip --title "Release ${{ env.NBGV_SimpleVersion }}.0"
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        shell: powershell
